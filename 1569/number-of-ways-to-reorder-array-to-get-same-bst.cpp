class Solution {
public:
    long long pascal[2000][2000] = {}; //這裡會浪費memory,初始成0時，也會浪費時間
    int numOfWays(vector<int>& nums) {
        //這題超難，沒有頭緒。題目說要 mod 1000000007 表示應要用到 DP
        //應該是要先建出BST樹
        //接下來，再照著sub-tree 來組合出超多的答案
        int N = nums.size();
        genPascal(N);

        long long ans = dfs(nums);
        ans = ans % 1000000007;
        return ans - 1;
    }

    long long dfs(vector<int>&nums) {
        int N = nums.size();
        if(N<=2) return 1;//不要再dfs

        vector<int> left, right;//利用最前面的nums[0]隔開
        //因為在建BST時，nums[0]會變成root,然後分兩群
        for(int i=1; i<N; i++){
            if(nums[i]<nums[0]) left.push_back(nums[i]);
            else right.push_back(nums[i]);
        }

        long long left_ans = dfs(left) % 1000000007;
        long long right_ans = dfs(right) % 1000000007;

        long long N1 = left.size(), N2 = right.size();
        long long ans = pascal[N-1][N1] * left_ans % 1000000007;
        ans *=right_ans % 1000000007;
        return ans;
    }
    
    void genPascal(int n) {
        pascal[0][0] = 1;
        for(int i=1; i<=n; i++){
            pascal[i][0]=1;
            for(int j=1; j<=n; j++){
                pascal[i][j] = (pascal[i-1][j-1] + pascal[i-1][j]) % 1000000007;
            }
        }
        //印出Pascal三角形確認
//        for(int i=0; i<=n; i++){
//            for(int j=0; j<=i; j++){
//                printf("%lld ", pascal[i][j]);
//            }
//            printf("\n");
//        }
    }
};
//case 40/161: [30,11,46,3,29,22,37,32,13,49,48,16,40,8,24,44,9,39,25,21,41,26,43,19,47,7,10,31,45,4,35,14,20,23,15,17,38,2,6,18,5,33,27,36,42,28,12,34,1]
//case 148/161: [29,187,536,274,984,398,991,81,414,346,174,595,143,165,432,313,152,730,852,692,56,157,84,3,699,715,366,392,225,457,240,283,594,661,328,74,376,306,969,367,360,871,1000,254,793,503,394,665,797,73,590,24,621,510,83,686,379,55,208,599,273,13,798,35,645,336,351,952,131,481,80,553,501,423,778,415,939,901,535,738,272,704,425,518,412,31,194,960,312,226,876,99,448,668,854,790,431,606,810,998,168,865,217,724,608,787,753,541,631,458,418,26,632,133,318,159,184,358,235,156,203,994,185,670,765,604,931,104,297,245,985,220,224,94,892,82,832,8,421,853,925,734,756,636,256,533,291,108,78,913,941,450,386,365,777,574,658,899,18,325,639,678,86,664,637,205,250,568,16,860,424,389,252,514,579,492,335,776,506,577,200,300,601,38,10,566,11,863,920,502,598,989,592,320,305,978,679,123,662,571,720,199,101,66,192,591,324,950,331,624,27,316,698,100,263,866,877,278,521,72,953,496,71,893,42,974,447,943,484,557,742,215,497,290,438,181,695,515,218,975,736,977,282,676,944,50,660,231,806,455,650,95,275,368,428,841,154,824,936,689,965,788,210,873,142,356,440,253,845,445,264,135,516,855,161,422,70,491,864,747,118,947,700,922,839,465,856,709,171,968,667,508,102,233,333,546,4,446,295,956,47,763,126,277,782,723,795,630,407,285,395,25,279,451,911,259,5,973,442,249,948,570,837,409,921,997,145,338,857,862,303,221,619,791,897,596,494,435,198,750,132,17,767,805,683,255,559,807,729,87,299,940,528,49,996,603,569,12,547,971,326,799,76,642,904,97,265,234,419,891,469,197,315,634,796,623,402,783,449,585,498,721,61,63,586,626,461,633,663,257,982,675,307,768,652,121,311,246,830,813,383,706,188,209,792,512,242,6,682,785,323,949,593,525,158,298,584,58,178,934,163,993,859,281,780,54,889,327,906,477,684,330,822,638,464,339,244,552,825,90,545,193,177,835,550,867,543,452,908,649,441,519,963,92,823,786,651,212,380,588,45,243,589,439,719,653,567,618,794,957,740,196,905,400,819,717,759,726,827,353,848,849,809,817,350,22,622,607,710,453,843,388,352,488,882,770,887,475,319,912,459,811,202,269,580,499,846,694,654,347,896,417,170,691,34,673,140,39,408,413,728,411,551,880,373,113,833,321,434,490,816,236,919,761,640,942,227,766,743,760,37,19,858,576,268,230,462,426,711,986,362,162,951,480,751,875,153,752,612,342,890,416,937,600,149,737,657,681,495,385,838,828,382,565,928,378,150,926,938,124,322,511,587,2,655,304,436,309,294,98,526,703,966,485,530,754,826,616,474,648,647,260,33,128,685,627,803,454,51,741,166,909,107,374,120,895,836,119,302,393,284,687,308,861,749,30,572,239,902,582,68,573,979,334,125,844,558,487,597,88,46,93,176,420,883,961,923,370,20,473,581,489,933,267,183,164,605,310,486,764,620,293,659,146,369,410,114,399,141,115,179,755,190,898,609,842,390,329,405,430,800,918,881,21,708,976,840,375,987,371,201,288,296,357,613,69,644,189,615,583,725,696,276,935,169,672,802,874,970,872,138,990,821,646,191,437,522,757,745,354,204,820,175,292,688,43,60,482,716,361,771,206,112,109,995,117,712,53,517,433,962,564,471,560,831,701,344,555,540,23,28,983,748,879,372,32,219,470,744,271,781,520,544,478,429,850,641,173,467,160,343,575,89,731,359,111,972,999,505,610,538,870,397,403,85,355,775,804,507,1,886,808,739,237,981,127,444,924,693,705,214,216,443,472,280,64,91,954,213,65,186,116,680,40,456,317,286,548,180,148,563,697,266,549,915,167,746,774,617,460,504,885,62,247,967,476,289,332,643,384,345,868,732,129,207,483,466,262,14,927,910,666,628,930,391,702,801,878,611,404,656,914,714,479,75,629,772,988,337,635,758,301,232,41,79,762,105,106,147,364,195,814,677,671,980,7,916,562,48,427,144,773,561,406,387,690,9,735,493,869,955,513,401,15,602,542,348,917,929,815,36,707,900,270,139,248,110,959,894,669,674,722,888,155,500,713,151,134,847,932,851,733,44,314,531,103,222,524,223,903,789,122,340,59,537,556,529,363,523,727,554,958,625,884,907,992,534,812,946,238,229,578,349,769,137,287,182,261,52,964,532,381,130,829,57,96,341,468,818,784,228,527,136,251,241,77,614,718,396,834,945,258,211,539,463,779,377,172,67,509]

//由 nums[0] 決定 left 及 right 有哪些值。重覆做。而算出結果後，還有大量排列組合可產生，就查Pascal三角形的 1,11,121,1331,14641 表，便是排列組合的數目,比如說 C(4,0)會是1, C(4,1)會是4, C(4,2)會是6，C(4,3)會是4, C(4,4)會是1
