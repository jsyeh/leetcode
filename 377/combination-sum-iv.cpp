class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        int N = nums.size();
        long long table[target+1]; //table[t]表示走到第t格時，可能的組合數
        for(int t=0; t<=target; t++) {
            table[t] = 0; //陣列先都清為0
        }
        table[0] = 1; //基礎，都不用時的解法1種
        for(int t=1; t<=target; t++) { //以第t格為基礎，去更新table[t]
            for(int num : nums) { //因為最後一步這些都有可能，逐一更新
                if(t-num>=0 && table[t]+table[t-num]<=INT_MAX) table[t] += table[t-num];
                //如果沒有加上 INT_MAX 的保護的話，在過程中有些格會爆掉。
                //因為題目「保證」 answer 不會超過 32-bit integer, 所以超過的就不是答案，不用存下來
            } //如果能用 num 來走到，那就多這種走法的組合數
        }
        return table[target];
    }
};
//case 14/15: [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200,210,220,230,240,250,260,270,280,290,300,310,320,330,340,350,360,370,380,390,400,410,420,430,440,450,460,470,480,490,500,510,520,530,540,550,560,570,580,590,600,610,620,630,640,650,660,670,680,690,700,710,720,730,740,750,760,770,780,790,800,810,820,830,840,850,860,870,880,890,900,910,920,930,940,950,960,970,980,990,111]
// 999 數字太大時，會導致 overflow
// 但題目有說 answer 不會超過 32-bit 啊！ 所以超過的就不要算吧
